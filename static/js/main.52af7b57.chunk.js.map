{"version":3,"sources":["logo.svg","GameCell.js","GameBoard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GameCell","rowIndex","colIndex","currentStatus","onSelect","appliedClass","className","onClick","GameBoard","gameMatrix","onCellSelect","map","row","col","App","useState","player","setPlayer","gameOver","setGameOver","winner","setWinner","setGameMatrix","gameMoves","setGameMoves","gameWon","id","alreadySelected","newGameMatrix","newGameMoves","push","addToGameMove","every","x","idx","y","alert","verifyGame","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.52af7b57.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nconst GameCell = ({rowIndex, colIndex, currentStatus, onSelect}) => {\n  const appliedClass = currentStatus === 1 ? 'bg-red' : currentStatus === 2 ? 'bg-green' : '';\n\n  const handleClick = () => onSelect(rowIndex, colIndex);\n\n  return (\n    <td className={appliedClass} onClick={handleClick}>\n    </td>\n  );\n};\n\nexport default GameCell;","import React from 'react';\nimport GameCell from './GameCell';\n\nconst GameBoard = ({gameMatrix, onCellSelect}) => {\n  return (\n    <table>\n      <tbody>\n        {\n          gameMatrix.map( (row, rowIndex) => {\n            return (\n              <tr>\n              {\n                row.map( (col, colIndex) => {\n                  return (\n                    <GameCell \n                      colIndex={colIndex} \n                      rowIndex={rowIndex} \n                      currentStatus={col} \n                      onSelect={onCellSelect}\n                      />\n                  );\n                } )\n              }            \n              </tr>\n            );\n          })\n        }\n      </tbody>\n    </table>\n  );\n};\nexport default GameBoard;","import React , { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport GameBoard from './GameBoard';\n\nfunction App() {\n  const getInitialGameMatrix = () => {\n    return [\n      [0,0,0],\n      [0,0,0],\n      [0,0,0]\n    ];\n  };\n  const [player, setPlayer] = useState(1);\n  const [gameOver, setGameOver] = useState(false);\n  const [winner, setWinner] = useState(0);\n  const [gameMatrix , setGameMatrix] = useState(getInitialGameMatrix());\n  const [gameMoves, setGameMoves] = useState([]);\n\n  const resolveNextTurn = () => {\n    return player === 1 ? 2 : 1;\n  };\n\n  const gameWon = () => {\n    setWinner(player);\n    setGameOver(true);\n  }\n\n  const verifyGame = (rowIndex, colIndex) => {\n    const rowConquered = gameMatrix[rowIndex].every(\n      x => x === player\n    );\n    if(rowConquered) {\n      gameWon();\n      return;\n    }\n    const colConquered = gameMatrix.every(\n      row => row[colIndex] === player\n    );\n    if(colConquered) {\n      gameWon();\n      return;\n    }\n    if(rowIndex === colIndex) {\n      const diagonal = gameMatrix.every(\n        (row, idx) => gameMatrix[idx][idx] === player\n      );\n      if(diagonal) {\n        gameWon();\n        return;\n      }\n    }\n    const allSelected = gameMatrix.every(x => {\n      return x.every(y => y !== 0);\n    });\n    if(allSelected) {\n      alert(\"No more moves left\");\n      setGameOver(true);\n    }\n  };\n\n  const alreadySelected = (rowIndex, colIndex) => {\n    return gameMatrix[rowIndex][colIndex] !== 0;\n  }\n\n  const addToGameMove = (rowIndex, colIndex) => {\n    const newGameMoves = [\n      ...gameMoves\n    ];\n    newGameMoves.push({\n      row : rowIndex,\n      col : colIndex,\n      player : player\n    });\n    setGameMoves(newGameMoves);\n  };\n\n  const selectCell = (rowIndex, colIndex) => {\n    if(gameOver) return;\n    if(alreadySelected(rowIndex, colIndex)) return;\n    const newGameMatrix = [...gameMatrix];\n    newGameMatrix[rowIndex][colIndex] = player;\n    setGameMatrix(newGameMatrix);\n    addToGameMove(rowIndex, colIndex);\n    verifyGame(rowIndex, colIndex);\n    setPlayer(resolveNextTurn());\n  };\n\n  const restartGame = () => {\n    setWinner(0);\n    setGameOver(false);\n    setPlayer(1);\n    setGameMatrix(getInitialGameMatrix());\n  };\n\n  return (\n    <>\n      <div id=\"app\">\n        <div id=\"playground\">\n          {!gameOver &&\n              (\n                <>\n                <span>Player {player}'s turn</span>\n                <br/>\n                </>\n              )\n          }\n          <GameBoard gameMatrix={gameMatrix} onCellSelect={selectCell} />\n          {gameOver && (\n              <>\n              {winner !== 0 ? (\n                <span>\n                  Winner : Player {winner}\n                </span>\n              ) : (\n                <span>\n                  Game over ! No moves left\n                </span>\n              )}\n              <button onClick={restartGame}>\n                Play again !!\n              </button>\n              </>\n            )\n          }\n        </div>\n        <div id=\"history\">\n          {gameMoves.map( ({player, row, col}) => {\n            return (\n              <div>\n                Player {player} chose Row : {row} Col : {col}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}